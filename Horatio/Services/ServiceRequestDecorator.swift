//
//  Copyright © 2016 Kevin Tatroe. All rights reserved.
//  See LICENSE.txt for this sample’s licensing information

import Foundation


/**
 Applies changes to the `NSMutableURLRequest` generated by an `ServiceRequest` prior
 to turning the URL request into a fetch.
 */
public protocol ServiceRequestDecorator: class {
    func compose(_ urlRequest: NSMutableURLRequest)
}


/**
 Adds an HTTP header indicating the response can be Gzip compressed.
 */
open class AcceptGZIPHeadersServiceRequestDecorator: ServiceRequestDecorator {
    // MARK: - Initializers

    public init() { }


    // MARK: - Protocols

    // MARK: <ServiceRequestDecorator>

    open func compose(_ urlRequest: NSMutableURLRequest) {
        urlRequest.setValue("gzip", forHTTPHeaderField: "Accept-Encoding")
    }
}


/**
 Applies its parameters either as GET parameters or by building a POST body payload
 as appropriate for the type of request.
 */
open class HTTPParametersBodyServiceRequestDecorator: ServiceRequestDecorator {
    // MARK: - Properties

    let type: ServiceEndpointType
    let parameters: [String : String]


    // MARK: - Initialization

    public init(type: ServiceEndpointType, parameters: [String : String]) {
        self.type = type
        self.parameters = parameters
    }


    // MARK: - Protocols

    // MARK: <ServiceRequestDecorator>

    open func compose(_ urlRequest: NSMutableURLRequest) {
        guard !parameters.isEmpty else { return }

        switch type {
        case .get:
            if let requestURL = urlRequest.url {
                urlRequest.url = requestURL.urlByAppendingQueryParameters(parameters)
            }

        case .post: fallthrough
        case .put: fallthrough
        case .delete:
            urlRequest.addValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")

            var valueStrings = [String]()

            for (key, value) in parameters {
                let encodedValue = value.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed)
                valueStrings.append("\(key)=\(encodedValue)")
            }

            let requestBody = valueStrings.joined(separator: "&")

            let data = requestBody.data(using: String.Encoding.utf8)
            urlRequest.httpBody = data

        case .header:
            /// TODO: support HEADER requests
            break
        }
    }
}


internal extension URL {
    /**
     Provides support for mutating a URL into another by adding query parameters to the
     URL's existing parameters (or by adding query parameters if none already exist).
     */
    func urlByAppendingQueryParameters(_ parameters: [String : String]?) -> URL {
        guard let parameters = parameters else { return self }
        guard var components = URLComponents(url: self, resolvingAgainstBaseURL: false) else { return self }

        for (key, value) in parameters {
            let queryItem = URLQueryItem(name: key, value: value)

            if let _ = components.queryItems {
                components.queryItems?.append(queryItem)
            } else {
                components.queryItems = [queryItem]
            }
        }

        if let url = components.url {
            return url
        }

        return self
    }
}

/**
 Adds HTTP headers indicating the response is expected (and allowed) to be in JSON format.
 */
public class XMLHeadersServiceRequestDecorator : ServiceRequestDecorator {
    public init() {

    }


    // MARK: - Protocols

    // MARK: <ServiceRequestDecorator>

    public func compose(_ urlRequest: NSMutableURLRequest) {
        urlRequest.setValue("text/html, application/xhtml+xml, application/xml; q=0.9, image/webp, */*; q=0.8", forHTTPHeaderField:"Accept")
        urlRequest.setValue("application/xml", forHTTPHeaderField: "Content-Type")
    }
}

/**
 Adds an HTTP header for HTTP Basic authentication.
 */
open class HTTPAuthServiceRequestDecorator: ServiceRequestDecorator {
    fileprivate let username: String
    fileprivate let password: String
    
    
    public init(username: String, password: String) {
        self.username = username
        self.password = password
    }
    
    
    open func compose(_ urlRequest: NSMutableURLRequest) {
        let credentials = "\(username):\(password)"
        
        if let data = credentials.data(using: String.Encoding.utf8) {
            let credentials = data.base64EncodedString(options: NSData.Base64EncodingOptions())
            let value = "Basic \(credentials)"
            
            urlRequest.setValue(value, forHTTPHeaderField: "Authorization")
        }
    }
}
